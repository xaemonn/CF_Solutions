#include <bits/stdc++.h>using namespace std; #define ll long long#define gc getchar_unlocked#define fo(i, n) for (i = 0; i < n; i++)#define Fo(i, k, n) for (i = k; k < n ? i < n : i > n; k < n ? i += 1 : i -= 1)#define si(x) scanf("%d", &x)#define sl(x) scanf("%lld", &x)#define ss(s) scanf("%s", s)#define pi(x) printf("%d\n", x)#define pl(x) printf("%lld\n", x)#define ps(s) printf("%s\n", s)#define deb(x) cout << #x << "=" << x << endl#define deb2(x, y) cout << #x << "=" << x << "," << #y << "=" << y << endl#define pb push_back#define mp make_pair#define F first#define S second#define all(x) x.begin(), x.end()#define clr(x) memset(x, 0, sizeof(x))#define sortall(x) sort(all(x))#define tr(it, a) for (auto it = a.begin(); it != a.end(); it++)#define PI 3.1415926535897932384626#define MOD 1000000007typedef pair<int, int> pii;typedef pair<ll, ll> pl;typedef vector<bool> vb;typedef vector<int> vi;typedef vector<ll> vl;typedef vector<pii> vpii;typedef vector<pl> vpl;typedef vector<vi> vvi;typedef vector<vl> vvl; class DisjointSet {    vector<int> rank, parent;public:    DisjointSet(int n) {        rank.resize(n + 1, 0);        parent.resize(n + 1);        for (int i = 0; i <= n; i++) {            parent[i] = i;        }    }     int findUPar(int node) {        if (node == parent[node])            return node;        return parent[node] = findUPar(parent[node]);    }     bool unionByRank(int u, int v) {        int ulp_u = findUPar(u);        int ulp_v = findUPar(v);        if (ulp_u == ulp_v) return false;        if (rank[ulp_u] < rank[ulp_v]) {            parent[ulp_u] = ulp_v;        }        else if (rank[ulp_v] < rank[ulp_u]) {            parent[ulp_v] = ulp_u;        }        else {            parent[ulp_v] = ulp_u;            rank[ulp_u]++;        }        return true;    }}; int main() {    ios_base::sync_with_stdio(0);    cin.tie(0); cout.tie(0);    int tc = 1;    cin >> tc;    for (int t = 1; t <= tc; t++) {              ll n; cin>>n;        vector<pair<ll,ll>> v(n);        ll maxx=0;        ll mini=INT_MAX;        for(int i=0; i<n ;i++){            ll a,b;            cin>>a>>b;            v[i]={a,b};            maxx=max(maxx,b);            mini=min(mini,a);        }        DisjointSet ds(maxx);        vector<int> chosen;         for (int i = 0; i < n; i++) {            int a = v[i].first, b = v[i].second;            if (ds.unionByRank(a, b)) {                chosen.push_back(i); // keep this pair            }            // else skip (avoids cycle)        }         cout << chosen.size() << "\n";        for (int idx : chosen) cout << idx+1 << " ";        cout << "\n";            }    return 0;}