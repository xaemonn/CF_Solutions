#include <bits/stdc++.h>using namespace std; #define ll long longconst int MOD = 1e9+7; ll m, d;string s;ll dp[2005][2005][2]; // pos, remainder, smallerFlagint L; ll call(int pos, int rem, int flag) {    if (pos == L) {        return (rem == 0);    }    ll &res = dp[pos][rem][flag];    if (res != -1) return res;    res = 0;     int lim = (flag ? 9 : (s[pos]-'0'));    for (int dig = 0; dig <= lim; dig++) {        if (pos == 0 && dig == 0) continue; // no leading zero               if ((pos % 2 == 0 && dig == d) || (pos % 2 == 1 && dig != d)) continue;         int nflag = flag | (dig < lim);        int nrem = (rem*10 + dig) % m;        res = (res + call(pos+1, nrem, nflag)) % MOD;    }    return res;} int solve(string bound) {    s = bound;    L = s.size();    memset(dp, -1, sizeof(dp));    return call(0, 0, 0);} string dec1(string s) {    int i = s.size()-1;    while (i >= 0 && s[i] == '0') {        s[i] = '9';        --i;    }    if (i >= 0) s[i]--;    return s;} bool check(string s) {    int rem = 0;    for (int i = 0; i < (int)s.size(); i++) {        int dig = s[i]-'0';        if ((i % 2 == 0 && dig == d) || (i % 2 == 1 && dig != d)) return false;        rem = (rem*10 + dig) % m;    }    return rem == 0;} void solve() {    string a, b;    cin >> m >> d;    cin >> a >> b;     int ans = solve(b) - solve(a);    if (check(a)) ans = (ans + 1) % MOD;    if (ans < 0) ans += MOD;    cout << ans << "\n";} int main() {    ios::sync_with_stdio(false);    cin.tie(0);    solve();    return 0;}